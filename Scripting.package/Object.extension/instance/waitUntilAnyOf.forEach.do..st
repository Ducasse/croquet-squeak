*Scripting-Extensions
waitUntilAnyOf: stopEvents forEach: loopEvents do: aBlock
	"Evaluate aBlock for each of the loop events generated by loopObject. Stop if stopEvent occurs in stopObject. See comment at the end for details."
	| sema nArgs loopHandler script |
	(nArgs := aBlock numArgs) > 2 ifTrue:[^self error:'0-2 argument block expected'].
	^(script := Processor activeProcess)
		observe: stopEvents
		semaphore: Semaphore new
		buffer: ScriptEventBuffer new
		during:[:stopHandler|
			sema := stopHandler semaphore.
			loopHandler := script observe: loopEvents semaphore: sema.
			[script waitProcessOn: sema. "until something happens"
			stopHandler buffer size = 0] whileTrue:
				[self privateSendEvent: loopHandler nextEvent to: aBlock args: nArgs].
			stopHandler nextEvent].